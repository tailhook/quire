#!/usr/bin/python
import yaml
import sys
import subprocess
import os
import difflib
import shlex

yaml.add_constructor('!Include', yaml.Loader.construct_scalar)
yaml.add_constructor('!GlobMap', yaml.Loader.construct_scalar)
yaml.add_constructor('!GlobSeq', yaml.Loader.construct_scalar)
yaml.add_constructor('!Unpack', yaml.Loader.construct_sequence)
yaml.add_constructor('!NoVars', yaml.Loader.construct_mapping) # may be anything
yaml.add_multi_constructor('!Template:',
    lambda ld, tag, node: ld.construct_mapping(node))

error = 0
filename = sys.argv[1]
with open(filename, 'rb') as f:
    data, spec = yaml.load_all(f)
for item in spec:
    if 'command-line' in item:
        proc = subprocess.Popen(
            shlex.split(os.environ['PWD']+'/'+item['command-line']
            + ' -f ' + filename),
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        outp = (stdout + stderr).decode('ascii')
        status = proc.returncode
        if 'result' in item:
            if status != item['result']:
                print(filename, 'FAILED:', item['command-line'],
                    ": returned", status, "instead", item['result'])
                error = 1
        if 'output' in item:
            if outp.rstrip() != item['output'].rstrip():
                print(filename, 'FAILED:', item['command-line'],
                    ': output is wrong, diff follows')
                for line in difflib.ndiff(item['output'].splitlines(),
                                          outp.splitlines()):
                    print('   ', line.rstrip())
                error = 1
sys.exit(error)
